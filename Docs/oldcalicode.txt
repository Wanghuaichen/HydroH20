
/*
int caliTurb() {   // collect data on turbidity references
  float ref_x[5] = {1.3, 10, 20, 100, 800};   // turbidity value of reference samples
  float ref_y[5]; // Holds Y value
  float m[5]; // Holds slopes
  
  char respArry[3];
  respArry[2]='\0'; //Add null char to end of array

  // Prompt for first value
  char promptBuff[65];
  sprintf(promptBuff,"Please place %f NTU Standard into holder then type \"ok\": ", ref_x[0]);
  Serial.println(promptBuff);
  
  //Wait for user to type in OK
  do {
    Serial.readBytesUntil(10,respArry, 2);
    respArry[2]='\0';
  } 
  while (strcmp(respArry, "ok"));

  //Retrieve first value
  if(!strcmp(respArry,"ok")) {
    Serial.println("Calibrating...");
    ref_y[0] = readTurbADC();
  } 
  
  //Clear buffer
  Serial.flush();
  memset(&respArry,0,3); 
  
  //Prompt-Collect rest of valuese
  for(int i = 1; i < 4 ; i++) {
    char promptBuff[65];
    sprintf(promptBuff,"Please place %f NTU Standard into holder then type \"ok\": ", ref_x[i]);
    Serial.println(promptBuff);
    do {
      Serial.readBytesUntil(10,respArry, 2);
      respArry[2]='\0';
    } 
    while (strcmp(respArry, "ok"));

    if(!strcmp(respArry,"ok")) {
      Serial.println("Calibrating...");
      ref_y[i] = readTurbADC();
    } 
    else {
      Serial.println("Please enter \"ok\"");
    }
    Serial.flush();
    memset(&respArry,0,3); 
  }
  
  m[0] = (ref_y[1] - ref_y[0]) / (ref_x[1] - ref_x[0]);

  for(int i = 2; i <= 8; i=i+2) {
    ref_y[i] = m[i/2-1]*(ref_x[i]-ref_x[i-1]) + ref_y[i-1];
    m[i/2] = (ref_y[i] - ref_y[i-1]) / (ref_x[i] - ref_x[i-1]);
    char promptBuff[65];
    sprintf(promptBuff,"ref_y[%d] = %f\nm[%d] = %f ", i, ref_y[i], i/2, m[i/2]);
    Serial.println(promptBuff);
  }
  
  conf.x0 = ref_x[0]; 
  conf.y0 = ref_y[0];                                  
  conf.m0 = 1 / m[0];                              
  conf.b0 = ref_x[0] - ref_y[0] / m[0];                              

  conf.x1 = ref_x[1];
  conf.y1 = ref_y[2];                                  
  conf.m1 = 1 / m[1];                              
  conf.b1 = ref_x[2] - ref_y[2] / m[1];
  
  conf.x2 = ref_x[3];
  conf.y2 = ref_y[4];                                  
  conf.m2 = 1 / m[2];                              
  conf.b2 = ref_x[4] - ref_y[4] / m[2];

  conf.x3 = ref_x[5];
  conf.y3 = ref_y[6];                                  
  conf.m3 = 1 / m[3];                              
  conf.b3 = ref_x[6] - ref_y[6] / m[3];

  conf.x4 = ref_x[7];
  conf.y4 = ref_y[8];                                  
  conf.m4 = 1 / m[4];                              
  conf.b4 = ref_x[8] - ref_y[8] / m[4];

  return 0;
}
*/


